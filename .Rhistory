counter_median=0
plist<-c()
for(i in 1:10){
alter_data<-NHANES %>%
select(Poverty, SmokeNow) %>%
filter(!is.na(SmokeNow)) %>%
mutate(PovertyPerm = sample(Poverty, replace=FALSE)) %>%
mutate(PovertyPerm = PovertyPerm + ifelse(SmokeNow == "No", 0.1, 0))
#permutation tests for the mean
perms_mean<-unlist(replicate(rep,alter_data%>%
mutate(ratioPerm=sample(PovertyPerm,replace=FALSE))%>%
group_by(SmokeNow)%>%
summarise(pmeans=mean(ratioPerm,na.rm=TRUE))%>%
summarise(diff(pmeans))))
#perms_mean
#permutation tests for the median
perms_median<-unlist(replicate(rep,alter_data%>%
mutate(ratioPerm=sample(PovertyPerm,replace=FALSE))%>%
group_by(SmokeNow)%>%
summarise(pmeds=median(ratioPerm,na.rm=TRUE))%>%
summarise(diff(pmeds))))
#perms_median
#real difference in mean/median from this dataset
real_df<-alter_data%>%
group_by(SmokeNow)%>%
summarise(pmeans=mean(PovertyPerm,na.rm=TRUE),pmeds=median(PovertyPerm,na.rm=TRUE))%>%
summarize(diff(pmeans),diff(pmeds))
#real_df
#calculate p-value to see whether null can be rejected,update counter accordingly
p_mean<-sum(abs(real_df$`diff(pmeans)`)<abs(perms_mean))/rep
plist<-c(plist,p_mean)
#counter_mean<-counter_mean+ifelse(p_mean<=0.05,1,0)
p_median<-sum(abs(real_df$`diff(pmeds)`)<abs(perms_median))/rep
p_mean
p_median
counter_median<-counter_median+ifelse(p_median<=0.05,1,0)
}
sum(plist<=0.05)
#power of mean1-counter_mean/rep
#power of median
1-counter_median/rep
rep=200
counter_mean=0
counter_median=0
plist_mean<-c()
plist_median<-c()
for(i in 1:10){
alter_data<-NHANES %>%
select(Poverty, SmokeNow) %>%
filter(!is.na(SmokeNow)) %>%
mutate(PovertyPerm = sample(Poverty, replace=FALSE)) %>%
mutate(PovertyPerm = PovertyPerm + ifelse(SmokeNow == "No", 0.1, 0))
#permutation tests for the mean
perms_mean<-unlist(replicate(rep,alter_data%>%
mutate(ratioPerm=sample(PovertyPerm,replace=FALSE))%>%
group_by(SmokeNow)%>%
summarise(pmeans=mean(ratioPerm,na.rm=TRUE))%>%
summarise(diff(pmeans))))
#perms_mean
#permutation tests for the median
perms_median<-unlist(replicate(rep,alter_data%>%
mutate(ratioPerm=sample(PovertyPerm,replace=FALSE))%>%
group_by(SmokeNow)%>%
summarise(pmeds=median(ratioPerm,na.rm=TRUE))%>%
summarise(diff(pmeds))))
#perms_median
#real difference in mean/median from this dataset
real_df<-alter_data%>%
group_by(SmokeNow)%>%
summarise(pmeans=mean(PovertyPerm,na.rm=TRUE),pmeds=median(PovertyPerm,na.rm=TRUE))%>%
summarize(diff(pmeans),diff(pmeds))
#real_df
#calculate p-value to see whether null can be rejected,update counter accordingly
p_mean<-sum(abs(real_df$`diff(pmeans)`)<abs(perms_mean))/rep
plist_mean<-c(plist_mean,p_mean)
#counter_mean<-counter_mean+ifelse(p_mean<=0.05,1,0)
p_median<-sum(abs(real_df$`diff(pmeds)`)<abs(perms_median))/rep
plist_median<-c(plist_median,p_median)
}
sum(plist<=0.05)/10
sum(plist_median<=0.05)/10
rep=200
counter_mean=0
counter_median=0
plist_mean<-c()
plist_median<-c()
for(i in 1:50){
alter_data<-NHANES %>%
select(Poverty, SmokeNow) %>%
filter(!is.na(SmokeNow)) %>%
mutate(PovertyPerm = sample(Poverty, replace=FALSE)) %>%
mutate(PovertyPerm = PovertyPerm + ifelse(SmokeNow == "No", 0.1, 0))
#permutation tests for the mean
perms_mean<-unlist(replicate(rep,alter_data%>%
mutate(ratioPerm=sample(PovertyPerm,replace=FALSE))%>%
group_by(SmokeNow)%>%
summarise(pmeans=mean(ratioPerm,na.rm=TRUE))%>%
summarise(diff(pmeans))))
#permutation tests for the median
perms_median<-unlist(replicate(rep,alter_data%>%
mutate(ratioPerm=sample(PovertyPerm,replace=FALSE))%>%
group_by(SmokeNow)%>%
summarise(pmeds=median(ratioPerm,na.rm=TRUE))%>%
summarise(diff(pmeds))))
#real difference in mean/median from this dataset
real_df<-alter_data%>%
group_by(SmokeNow)%>%
summarise(pmeans=mean(PovertyPerm,na.rm=TRUE),pmeds=median(PovertyPerm,na.rm=TRUE))%>%
summarize(diff(pmeans),diff(pmeds))
#calculate p-value to see whether null can be rejected,update counter accordingly
p_mean<-sum(abs(real_df$`diff(pmeans)`)<abs(perms_mean))/rep
plist_mean<-c(plist_mean,p_mean)
p_median<-sum(abs(real_df$`diff(pmeds)`)<abs(perms_median))/rep
plist_median<-c(plist_median,p_median)
}
sum(plist<=0.05)/50
sum(plist_median<=0.05)/50
rep=200
counter_mean=0
counter_median=0
plist_mean<-c()
plist_median<-c()
for(i in 1:50){
alter_data<-NHANES %>%
select(Poverty, SmokeNow) %>%
filter(!is.na(SmokeNow)) %>%
mutate(PovertyPerm = sample(Poverty, replace=FALSE)) %>%
mutate(PovertyPerm = PovertyPerm + ifelse(SmokeNow == "No", 0.1, 0))
#permutation tests for the mean
perms_mean<-unlist(replicate(rep,alter_data%>%
mutate(ratioPerm=sample(PovertyPerm,replace=FALSE))%>%
group_by(SmokeNow)%>%
summarise(pmeans=mean(ratioPerm,na.rm=TRUE))%>%
summarise(diff(pmeans))))
#permutation tests for the median
perms_median<-unlist(replicate(rep,alter_data%>%
mutate(ratioPerm=sample(PovertyPerm,replace=FALSE))%>%
group_by(SmokeNow)%>%
summarise(pmeds=median(ratioPerm,na.rm=TRUE))%>%
summarise(diff(pmeds))))
#real difference in mean/median from this dataset
real_df<-alter_data%>%
group_by(SmokeNow)%>%
summarise(pmeans=mean(PovertyPerm,na.rm=TRUE),pmeds=median(PovertyPerm,na.rm=TRUE))%>%
summarize(diff(pmeans),diff(pmeds))
#calculate p-value to see whether null can be rejected,update counter accordingly
p_mean<-sum(abs(real_df$`diff(pmeans)`)<abs(perms_mean))/rep
plist_mean<-c(plist_mean,p_mean)
p_median<-sum(abs(real_df$`diff(pmeds)`)<abs(perms_median))/rep
plist_median<-c(plist_median,p_median)
}
sum(plist<=0.05)/50
sum(plist_median<=0.05)/50
library(readr)
macnell <- read_csv("~/math154/homework/course materials/macnell.csv")
View(macnell)
View(macnell)
NHANES%>%select(Poverty, SmokeNow) %>%
filter(!is.na(SmokeNow))%>%
mutate(ratio_perm=sample(Poverty,replace=FALSE))
#library(devtools)
#devtools::install_github("statlab/permuter")
require(permuter)
data(macnell)  # let me know if the data don't install, and I can send them to you
require(NHANES)
require(dplyr)
data(NHANES)
View(NHANES)
library(devtools)
#library(devtools)
#devtools::install_github("statlab/permuter")
require(permuter)
data(macnell)  # let me know if the data don't install, and I can send them to you
require(NHANES)
require(dplyr)
data(NHANES)
View(NHANES)
macnell <- read.csv("macnell.csv")
#library(devtools)
#devtools::install_github("statlab/permuter")
require(permuter)
data(macnell)  # let me know if the data don't install, and I can send them to you
require(NHANES)
require(dplyr)
data(NHANES)
#View(NHANES)
macnell <- read.csv("macnell.csv")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, cache=TRUE,
fig.width=7, fig.height=3, fig.align = "center")
options(digits=3)
d<-gender_binge%>%
mutate(binge_numeric=ifelse(binge=="yes",1,0))
require(ggplot2)
require(tidyr)
require(dplyr)
require(boot)
require(mosaic)
d<-gender_binge%>%
mutate(binge_numeric=ifelse(binge=="yes",1,0))
#create gender vector/column
gender<-c(rep("female",8471),rep("male",5348))
#gender
#create binge-drinker vector column:1 means is a binge-drinker, 0 means is NOT
binge<-c(rep("yes",1748),rep("no",6723),rep("yes",1392),rep("no",3956))
#binge
#put two columns in one data frame
gender_binge<-data.frame(gender,binge)
is.data.frame(gender_binge)
d<-gender_binge%>%
mutate(binge_numeric=ifelse(binge=="yes",1,0))
fn<-function(data,index){
return(sum(data[index])/length(data[index]))
}
reps<-50
low1<-c()
up1<-c()
low<-c()
up<-c()
low3<-c()
up3<-c()
interval1<-c()
for(i in 1:reps){
bootResult<-boot(d$binge_numeric,fn,100)
sd<-sd(bootResult$t)
lower1<-0.227-2*sd
upper1<-0.227+2*sd
low1<-c(low1,lower1)
up1<-c(up1,upper1)
interval1<-c(interval1,upper1-lower1)
#CI2
lower<-quantile(bootResult$t, probs = .025)
upper<-quantile(bootResult$t, probs = .975)
low<-c(low,lower)
up<-c(up,upper)
#CI3
low3<-c(low3,2*0.227-upper)
up3<-c(up3,2*0.227-lower)
}
sum(low1<=0.225&0.225<=up1)/reps
sum(low<=0.225&0.225<=up)/reps
sum(low3<=0.225&0.225<=up3)/reps
sum(interval1)/reps
d<-gender_binge%>%
mutate(binge_numeric=ifelse(binge=="yes",1,0))
fn<-function(data,index){
return(sum(data[index])/length(data[index]))
}
reps<-50
low1<-c()
up1<-c()
low<-c()
up<-c()
low3<-c()
up3<-c()
interval1<-c()
interval2<-c()
interval3<-c()
for(i in 1:reps){
bootResult<-boot(d$binge_numeric,fn,100)
sd<-sd(bootResult$t)
lower1<-0.227-2*sd
upper1<-0.227+2*sd
low1<-c(low1,lower1)
up1<-c(up1,upper1)
interval1<-c(interval1,upper1-lower1)
#CI2
lower<-quantile(bootResult$t, probs = .025)
upper<-quantile(bootResult$t, probs = .975)
low<-c(low,lower)
up<-c(up,upper)
interval2<-c(interval2,upper-lower)
#CI3
low3<-c(low3,2*0.227-upper)
up3<-c(up3,2*0.227-lower)
interval3<-c(interval3,upper1-lower3)
}
d<-gender_binge%>%
mutate(binge_numeric=ifelse(binge=="yes",1,0))
fn<-function(data,index){
return(sum(data[index])/length(data[index]))
}
reps<-50
low1<-c()
up1<-c()
low<-c()
up<-c()
low3<-c()
up3<-c()
interval1<-c()
interval2<-c()
interval3<-c()
for(i in 1:reps){
bootResult<-boot(d$binge_numeric,fn,100)
sd<-sd(bootResult$t)
lower1<-0.227-2*sd
upper1<-0.227+2*sd
low1<-c(low1,lower1)
up1<-c(up1,upper1)
interval1<-c(interval1,upper1-lower1)
#CI2
lower<-quantile(bootResult$t, probs = .025)
upper<-quantile(bootResult$t, probs = .975)
low<-c(low,lower)
up<-c(up,upper)
interval2<-c(interval2,upper-lower)
#CI3
low3<-c(low3,2*0.227-upper)
up3<-c(up3,2*0.227-lower)
interval3<-c(interval3,(2*0.227-lower)-(2*0.227-upper))
}
sum(low1<=0.225&0.225<=up1)/reps
sum(low<=0.225&0.225<=up)/reps
sum(low3<=0.225&0.225<=up3)/reps
sum(interval1)/reps
sum(interval2)/reps
sum(interval3)/reps
d<-gender_binge%>%
mutate(binge_numeric=ifelse(binge=="yes",1,0))
fn<-function(data,index){
return(sum(data[index])/length(data[index]))
}
reps<-50
low1<-c()
up1<-c()
low<-c()
up<-c()
low3<-c()
up3<-c()
interval1<-c()
interval2<-c()
interval3<-c()
for(i in 1:reps){
bootResult<-boot(d$binge_numeric,fn,100)
sd<-sd(bootResult$t)
lower1<-0.227-2*sd
upper1<-0.227+2*sd
low1<-c(low1,lower1)
up1<-c(up1,upper1)
interval1<-c(interval1,upper1-lower1)
#CI2
lower<-quantile(bootResult$t, probs = .025)
upper<-quantile(bootResult$t, probs = .975)
low<-c(low,lower)
up<-c(up,upper)
interval2<-c(interval2,upper-lower)
#CI3
low3<-c(low3,2*0.227-upper)
up3<-c(up3,2*0.227-lower)
interval3<-c(interval3,(2*0.227-lower)-(2*0.227-upper))
}
sum(low1<=0.225&0.225<=up1)/reps
sum(low<=0.225&0.225<=up)/reps
sum(low3<=0.225&0.225<=up3)/reps
sum(interval1)/reps
sum(interval2)/reps
sum(interval3)/reps
#separate the dataset into two gender-specifc samples
femaleSample<-gender_binge%>%
mutate(binge_numeric=ifelse(binge=="yes",1,0))%>%
filter(gender=="female")
maleSample<-gender_binge%>%
mutate(binge_numeric=ifelse(binge=="yes",1,0))%>%
filter(gender=="male")
reps<-100
low1<-c()
up1<-c()
low<-c()
up<-c()
low3<-c()
up3<-c()
interval1<-c()
interval2<-c()
interval3<-c()
#simulation
for(i in 1:reps){
#bootstrapping
test.stat<-c()
for(i in 1:reps){
#get a resample for both genders
#female_resample<-sample(femaleSample$binge_numeric,nrow(femaleSample),replace=T)
#male_resample<-sample(maleSample$binge_numeric,nrow(maleSample),replace=T)
#get the proportion from the resample
female_proportion<-prop(~binge=="yes",data = resample(femaleSample))
male_proportion<-prop(~binge=="yes",data = resample(maleSample))
#male_proportion<-sum(male_resample)/length(male_resample)
#get the test statistic(difference in proportions) from this resample
diff_proportion<-male_proportion-female_proportion
test.stat<-c(test.stat,diff_proportion)
}
mean<-mean(test.stat)
sd<-sd(test.stat)
mean
sd
#whether CI1 captures the true difference in proportions(5%=25%-20%)
lower1<-0.0539-2*sd
upper1<-0.0539+2*sd
low1<-c(low1,lower1)
up1<-c(up1,upper1)
interval1<-c(interval1,upper1-lower1)
#CI2
lower<-quantile(test.stat, probs = .05)
upper<-quantile(test.stat, probs = .95)
low<-c(low,lower)
up<-c(up,upper)
interval2<-c(interval2,upper-lower)
#CI3
low3<-c(low3,2*0.0539-upper)
up3<-c(up3,2*0.0539-lower)
interval3<-c(interval3,(2*0.0539-lower)-(2*0.0539-upper))
}
sum(low1<=0.05&0.05<=up1)/reps
sum(low<=0.05&0.05<=up)/reps
sum(low3<=0.05&0.05<=up3)/reps
#the probability that CI1 captures the true parameter
sum(interval1)/reps
sum(interval2)/reps
sum(interval3)/reps
#separate the dataset into two gender-specifc samples
femaleSample<-gender_binge%>%
mutate(binge_numeric=ifelse(binge=="yes",1,0))%>%
filter(gender=="female")
maleSample<-gender_binge%>%
mutate(binge_numeric=ifelse(binge=="yes",1,0))%>%
filter(gender=="male")
reps<-100
low1<-c()
up1<-c()
low<-c()
up<-c()
low3<-c()
up3<-c()
interval1<-c()
interval2<-c()
interval3<-c()
#simulation
for(i in 1:reps){
#bootstrapping
test.stat<-c()
for(i in 1:reps){
#get a resample for both genders
#female_resample<-sample(femaleSample$binge_numeric,nrow(femaleSample),replace=T)
#male_resample<-sample(maleSample$binge_numeric,nrow(maleSample),replace=T)
#get the proportion from the resample
female_proportion<-prop(~binge=="yes",data = resample(femaleSample))
male_proportion<-prop(~binge=="yes",data = resample(maleSample))
#male_proportion<-sum(male_resample)/length(male_resample)
#get the test statistic(difference in proportions) from this resample
diff_proportion<-male_proportion-female_proportion
test.stat<-c(test.stat,diff_proportion)
}
mean<-mean(test.stat)
sd<-sd(test.stat)
mean
sd
#whether CI1 captures the true difference in proportions(5%=25%-20%)
lower1<-0.0539-2*sd
upper1<-0.0539+2*sd
low1<-c(low1,lower1)
up1<-c(up1,upper1)
interval1<-c(interval1,upper1-lower1)
#CI2
lower<-quantile(test.stat, probs = .025)
upper<-quantile(test.stat, probs = .975)
low<-c(low,lower)
up<-c(up,upper)
interval2<-c(interval2,upper-lower)
#CI3
low3<-c(low3,2*0.0539-upper)
up3<-c(up3,2*0.0539-lower)
interval3<-c(interval3,(2*0.0539-lower)-(2*0.0539-upper))
}
sum(low1<=0.05&0.05<=up1)/reps
sum(low<=0.05&0.05<=up)/reps
sum(low3<=0.05&0.05<=up3)/reps
#the probability that CI1 captures the true parameter
sum(interval1)/reps
sum(interval2)/reps
sum(interval3)/reps
bootResult<-boot(d$binge_numeric,fn,100)
bootResult<-boot(d$binge_numeric,fn,100)
bootResult
bootResult<-boot(d$binge_numeric,fn,100)
bootResult
#95%percentage CI:
quantile(bootResult$t,C(0.025,0.975))
bootResult<-boot(d$binge_numeric,fn,100)
bootResult
#95%percentage CI:
quantile(bootResult$t,c(0.025,0.975))
#basic CI:
low<-quantile(bootResult$t,0.025)
high<-quantile(bootResult$t,0.975)
c(2*0.227-upper,2*0.227-lower)
bootResult<-boot(d$binge_numeric,fn,100)
bootResult
#95%percentage CI:
#quantile(bootResult$t,c(0.025,0.975))
low<-quantile(bootResult$t,0.025)
high<-quantile(bootResult$t,0.975)
c(low,high)
#basic CI:
c(2*0.227-upper,2*0.227-lower)
shiny::runApp('math154/team project/shinyapp')
install.packages('tidytext')
library(tidytext)
load("/Users/judy/Downloads/train-features/pet1.jpg.sift.Rdata")
setwd("~/Documents/GitHub/project-2-predictive-modelling-group-1")
(features, keypoints) <- load("/Users/judy/Documents/GitHub/project-2-predictive-modelling-group-1/data/dog-cats/pet1.jpg.sift.Rdata")
features <- load("/Users/judy/Documents/GitHub/project-2-predictive-modelling-group-1/data/dog-cats/pet1.jpg.sift.Rdata")
features <- load("/Users/judy/Documents/GitHub/project-2-predictive-modelling-group-1/data/dog-cats/pet1.jpg.sift.Rdata")
View(features)
c(features, keypoints) <- load("/Users/judy/Documents/GitHub/project-2-predictive-modelling-group-1/data/dog-cats/pet1.jpg.sift.Rdata")
