setwd("~/Documents/GitHub/Spring2018/Project_Starter_Codes/doc")
tm_test<-system.time(test_pred<-confusionMatrix(data=predict(pruned_tree, newdata=pets_test), reference=pets_test$label))
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
require(caret)
require(rpart)
install.packages('caret','rpart')
require(caret)
require(rpart)
install.packages('caret')
#install.packages('caret')
install.packages('rpart')
library(caret)
install.packages("rpart")
setwd("~/Documents/GitHub/project-2-predictive-modelling-group-1/doc")
label_train <- read.table("../data/train_label.txt", sep = "", header = F)
label_train <- as.numeric(unlist(label_train) == "dog")
features <- read.csv("../data/BOWmatrix-50.csv", sep = ",", header=T)
setwd("~/Documents/GitHub/project-2-predictive-modelling-group-1")
features <- read.csv("../data/BOWmatrix-50.csv", sep = ",", header=T)
label_train
features <- read.csv("../data/BOWmatrix-50.csv")
features <- read.csv("/Users/judy/Documents/GitHub/project-2-predictive-modelling-group-1/data/BOWmatrix-50.csv", sep = ",", header=T)
features <- read.csv("../data/BOWmatrix-50.csv", sep = ",", header=T)
feature <- features[,-1]
pets <- data.frame(feature,label=label_train)
head(pets)
setwd("~/Documents/GitHub/project-2-predictive-modelling-group-1/doc")
set.seed(47)
inTrain <- createDataPartition(label_train, p=.8, list=FALSE)
library(caret)
set.seed(47)
inTrain <- createDataPartition(label_train, p=.8, list=FALSE)
pets_train <- pets[inTrain,]
pets_test <- pets[-inTrain,]
fitControl <- trainControl(method="cv")
tree.cv.pets <- train(label ~ ., data=pets_train, method="rpart2",
trControl = fitControl, tuneGrid= data.frame(maxdepth=10,15,20,25,30))
set.seed(47)
inTrain <- createDataPartition(label_train, p=.8, list=FALSE)
pets_train <- pets[inTrain,]
pets_test <- pets[-inTrain,]
fitControl <- trainControl(method="cv")
tree.cv.pets <- train(label ~ ., data=pets_train, method="rpart2",
trControl = fitControl, tuneGrid= data.frame(maxdepth=c(10,15,20,25,30))
set.seed(47)
inTrain <- createDataPartition(label_train, p=.8, list=FALSE)
pets_train <- pets[inTrain,]
pets_test <- pets[-inTrain,]
fitControl <- trainControl(method="cv")
tree.cv.pets <- train(label ~ ., data=pets_train, method="rpart2",
trControl = fitControl, tuneGrid=data.frame(maxdepth=c(10,15,20,25,30)))
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, cache=TRUE,
fig.width=7, fig.height=3, fig.align = "center")
options(digits=3)
require(ISLR)
data(OJ)
head(OJ,3)
install.packages("ISLR")
library(ISLR)
data(OJ)
OJ
View(oj)
View(OJ)
label_train <- read.table("../data/train_label.txt", sep = "", header = F)
label_train <- ifelse(label_train == "dog", 'dog', 'cat')
label_train <- as.factor(label_train)
features <- read.csv("../data/BOWmatrix-50.csv", sep = ",", header=T)
feature <- features[,-1]
pets <- data.frame(feature,label=label_train)
head(pets)
set.seed(47)
inTrain <- createDataPartition(label_train, p=.8, list=FALSE)
pets_train <- pets[inTrain,]
pets_test <- pets[-inTrain,]
fitControl <- trainControl(method="cv")
tree.cv.pets <- train(label ~ ., data=pets_train, method="rpart2",
trControl = fitControl, tuneGrid=data.frame(maxdepth=c(10,15,20,25,30)))
library(e1071)
install.packages('e1071')
library(e1071)
set.seed(47)
inTrain <- createDataPartition(label_train, p=.8, list=FALSE)
pets_train <- pets[inTrain,]
pets_test <- pets[-inTrain,]
fitControl <- trainControl(method="cv")
tree.cv.pets <- train(label ~ ., data=pets_train, method="rpart2",
trControl = fitControl, tuneGrid=data.frame(maxdepth=c(10,15,20,25,30)))
tree.cv.pets
#Produce a plot with tree size on the x-axis and cross-validated
#classification error rate on the y-axis.
plot(tree.cv.pets)
set.seed(47)
inTrain <- createDataPartition(label_train, p=.8, list=FALSE)
pets_train <- pets[inTrain,]
pets_test <- pets[-inTrain,]
fitControl <- trainControl(method="cv")
tree.cv.pets <- train(label ~ ., data=pets_train, method="rpart2",
trControl = fitControl, tuneGrid=data.frame(maxdepth=5:15))
tree.cv.pets
#Produce a plot with tree size on the x-axis and cross-validated
#classification error rate on the y-axis.
plot(tree.cv.pets)
set.seed(47)
inTrain <- createDataPartition(label_train, p=.8, list=FALSE)
pets_train <- pets[inTrain,]
pets_test <- pets[-inTrain,]
fitControl <- trainControl(method="cv")
tree.cv.pets <- train(label ~ ., data=pets_train, method="rpart2",
trControl = fitControl, tuneGrid=data.frame(maxdepth=1:10))
tree.cv.pets
#Produce a plot with tree size on the x-axis and cross-validated
#classification error rate on the y-axis.
plot(tree.cv.pets)
set.seed(1)
inTrain <- createDataPartition(label_train, p=.8, list=FALSE)
pets_train <- pets[inTrain,]
pets_test <- pets[-inTrain,]
fitControl <- trainControl(method="cv")
tree.cv.pets <- train(label ~ ., data=pets_train, method="rpart2",
trControl = fitControl, tuneGrid=data.frame(maxdepth=1:10))
tree.cv.pets
#Produce a plot with tree size on the x-axis and cross-validated
#classification error rate on the y-axis.
plot(tree.cv.pets)
set.seed(10)
inTrain <- createDataPartition(label_train, p=.8, list=FALSE)
pets_train <- pets[inTrain,]
pets_test <- pets[-inTrain,]
fitControl <- trainControl(method="cv")
tree.cv.pets <- train(label ~ ., data=pets_train, method="rpart2",
trControl = fitControl, tuneGrid=data.frame(maxdepth=1:10))
tree.cv.pets
#Produce a plot with tree size on the x-axis and cross-validated
#classification error rate on the y-axis.
plot(tree.cv.pets)
set.seed(1)
inTrain <- createDataPartition(label_train, p=.8, list=FALSE)
pets_train <- pets[inTrain,]
pets_test <- pets[-inTrain,]
fitControl <- trainControl(method="cv")
tree.cv.pets <- train(label ~ ., data=pets_train, method="rpart2",
trControl = fitControl, tuneGrid=data.frame(maxdepth=1:10))
tree.cv.pets
#Produce a plot with tree size on the x-axis and cross-validated
#classification error rate on the y-axis.
plot(tree.cv.pets)
fitControl <- trainControl(method="none")
pruned_tree <- train(label ~ ., data=pets_train, method="rpart2", trControl = fitControl, tuneGrid= data.frame(maxdepth=7))
pruned_tree$finalModel
tm_test<-system.time(test_pred<-confusionMatrix(data=predict(pruned_tree, newdata=pets_test), reference=pets_test$label))
tm_train <- system.time(best_model <- train(label ~ ., data=pets, method="rpart2", trControl = fitControl, tuneGrid= data.frame(maxdepth=5)))
best_model$finalModel
save(best_model, file = "../output/best_model.RData")
tm_test<-system.time(test_pred<-confusionMatrix(data=predict(pruned_tree, newdata=pets_test), reference=pets_test$label))
test_pred
cat("Time for training model=", tm_train[1], "s \n")
cat("Time for making prediction=", tm_test[1], "s \n")
