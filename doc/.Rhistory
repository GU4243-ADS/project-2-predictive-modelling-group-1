text(prune.mydata,pretty=0)
tree.pred=predict(prune.mydata,mydata.test,type="class")
cpmatrix<-table(tree.pred,label.test)
cpmatrix
paccuracy = sum(cpmatrix[1,1]+cpmatrix[2,2])/(2000*0.2)
paccuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
if(!require("sets")){
install.packages("sets")
}
if(!require("tree")){
install.packages("tree")
}
if(!require("randomForest")){
install.packages("randomForest")
}
library("sets")
library("pbapply")
library("dplyr")
library("purrr")
library("EBImage")
library("gbm")
library("tidyverse")
library("grDevices")
library("class")
if(!require("sets")){
install.packages("sets")
}
if(!require("tree")){
install.packages("tree")
}
if(!require("randomForest")){
install.packages("randomForest")
}
library("sets")
library("pbapply")
library("dplyr")
library("purrr")
library("EBImage")
library("gbm")
library("tidyverse")
library("grDevices")
library("class")
setwd("C:/Users/Admin/Documents/GitHub/project-2-predictive-modelling-group-1/doc")
img_train_dir  <- "../data/pets/train/"
labels <- read.table(paste(img_train_dir, "../train_label.txt", sep = ""), header = F)
labels <- ifelse(labels == "dog", 'dog', 'cat')
label <- as.factor(labels)
features <- read.csv("../lib/BOWmatrix_std-200.csv", sep = ",", header=T)
feature <- features[,-1]
mydata <- data.frame(feature,label)
stdfeature <- scale(feature)
#head(stdfeature)
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=500)
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=200)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=150)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=100)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=110)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=115)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=105)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=110)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=105)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
if(!require("sets")){
install.packages("sets")
}
if(!require("tree")){
install.packages("tree")
}
if(!require("randomForest")){
install.packages("randomForest")
}
library("sets")
library("pbapply")
library("dplyr")
library("purrr")
library("EBImage")
library("gbm")
library("tidyverse")
library("grDevices")
library("class")
setwd("C:/Users/Admin/Documents/GitHub/project-2-predictive-modelling-group-1/doc")
img_train_dir  <- "../data/pets/train/"
labels <- read.table(paste(img_train_dir, "../train_label.txt", sep = ""), header = F)
labels <- ifelse(labels == "dog", 'dog', 'cat')
label <- as.factor(labels)
features <- read.csv("../lib/BOWmatrix50.csv", sep = ",", header=T)
features <- read.csv("../lib/BOWmatrix-50.csv", sep = ",", header=T)
feature <- features[,-1]
mydata <- data.frame(feature,label)
stdfeature <- scale(feature)
#head(stdfeature)
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=105)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=110)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=100)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=105)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
if(!require("sets")){
install.packages("sets")
}
if(!require("tree")){
install.packages("tree")
}
if(!require("randomForest")){
install.packages("randomForest")
}
library("sets")
library("pbapply")
library("dplyr")
library("purrr")
library("EBImage")
library("gbm")
library("tidyverse")
library("grDevices")
library("class")
setwd("C:/Users/Admin/Documents/GitHub/project-2-predictive-modelling-group-1/doc")
img_train_dir  <- "../data/pets/train/"
labels <- read.table(paste(img_train_dir, "../train_label.txt", sep = ""), header = F)
labels <- ifelse(labels == "dog", 'dog', 'cat')
label <- as.factor(labels)
feature <- get(load('../lib/feature_HOG.Rdata'))
mydata <- data.frame(feature,label)
stdfeature <- scale(feature)
#head(stdfeature)
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=105)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=5)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=50)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
#10s
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=10)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
#10s
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=4)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
#10s
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=6)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
#10s
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=7)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
#10s
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=5)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
#10s
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=6)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
if(!require("sets")){
install.packages("sets")
}
if(!require("tree")){
install.packages("tree")
}
if(!require("randomForest")){
install.packages("randomForest")
}
library("sets")
library("pbapply")
library("dplyr")
library("purrr")
library("EBImage")
library("gbm")
library("tidyverse")
library("grDevices")
library("class")
setwd("C:/Users/Admin/Documents/GitHub/project-2-predictive-modelling-group-1/doc")
img_train_dir  <- "../data/pets/train/"
labels <- read.table(paste(img_train_dir, "../train_label.txt", sep = ""), header = F)
labels <- ifelse(labels == "dog", 'dog', 'cat')
label <- as.factor(labels)
feature <- get(load('../lib/feature_HOG.Rdata'))
mydata <- data.frame(feature,label)
stdfeature <- scale(feature)
#head(stdfeature)
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=105)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(6)
train=sample(1:nrow(stdfeature),nrow(stdfeature)*0.8)
stdfeature.train=stdfeature[train,]
stdfeature.test=stdfeature[-train,]
label.train=label[train]
label.test=label[-train]
knn.pred=knn(stdfeature.train,stdfeature.test,label.train,k=6)
cmatrix = table(knn.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
prune.mydata=prune.misclass(tree.mydata,best=8)
plot(prune.mydata)
text(prune.mydata,pretty=0)
tree.pred=predict(prune.mydata,mydata.test,type="class")
cpmatrix<-table(tree.pred,label.test)
cpmatrix
paccuracy = sum(cpmatrix[1,1]+cpmatrix[2,2])/(2000*0.2)
paccuracy
if(!require("sets")){
install.packages("sets")
}
if(!require("tree")){
install.packages("tree")
}
if(!require("randomForest")){
install.packages("randomForest")
}
library("sets")
library("pbapply")
library("dplyr")
library("purrr")
library("EBImage")
library("gbm")
library("tidyverse")
library("grDevices")
library("tree")
setwd("C:/Users/Admin/Documents/GitHub/project-2-predictive-modelling-group-1/doc")
img_train_dir  <- "../data/pets/train/"
labels <- read.table(paste(img_train_dir, "../train_label.txt", sep = ""), header = F)
labels <- ifelse(labels == "dog", 'dog', 'cat')
label <- as.factor(labels)
feature <- get(load('../lib/feature_NN.Rdata'))
mydata <- data.frame(feature,label)
head(mydata)
set.seed(6)
train=sample(1:nrow(mydata),nrow(mydata)*0.8)
mydata.test=mydata[-train,]
label.test=label[-train]
tree.mydata =tree(label~.,mydata,subset=train)
tree.pred=predict(tree.mydata,mydata.test,type ="class")
cmatrix = table(tree.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(1)
cv.mydata<-cv.tree(tree.mydata, FUN=prune.misclass)
names(cv.mydata)
cv.mydata
plot(cv.mydata$size,cv.mydata$dev,type="b")
plot(cv.mydata$k ,cv.mydata$dev ,type="b")
prune.mydata=prune.misclass(tree.mydata,best=8)
plot(prune.mydata)
text(prune.mydata,pretty=0)
tree.pred=predict(prune.mydata,mydata.test,type="class")
cpmatrix<-table(tree.pred,label.test)
cpmatrix
paccuracy = sum(cpmatrix[1,1]+cpmatrix[2,2])/(2000*0.2)
paccuracy
if(!require("sets")){
install.packages("sets")
}
if(!require("tree")){
install.packages("tree")
}
if(!require("randomForest")){
install.packages("randomForest")
}
library("sets")
library("pbapply")
library("dplyr")
library("purrr")
library("EBImage")
library("gbm")
library("tidyverse")
library("grDevices")
library("tree")
setwd("C:/Users/Admin/Documents/GitHub/project-2-predictive-modelling-group-1/doc")
img_train_dir  <- "../data/pets/train/"
labels <- read.table(paste(img_train_dir, "../train_label.txt", sep = ""), header = F)
labels <- ifelse(labels == "dog", 'dog', 'cat')
label <- as.factor(labels)
features <- read.csv("../lib/BOWmatrix-50.csv", sep = ",", header=T)
feature <- features[,-1]
mydata <- data.frame(feature,label)
head(mydata)
set.seed(6)
train=sample(1:nrow(mydata),nrow(mydata)*0.8)
mydata.test=mydata[-train,]
label.test=label[-train]
tree.mydata =tree(label~.,mydata,subset=train)
tree.pred=predict(tree.mydata,mydata.test,type ="class")
cmatrix = table(tree.pred,label.test)
cmatrix
accuracy = sum(cmatrix[1,1]+cmatrix[2,2])/(2000*0.2)
accuracy
set.seed(1)
cv.mydata<-cv.tree(tree.mydata, FUN=prune.misclass)
names(cv.mydata)
cv.mydata
plot(cv.mydata$size,cv.mydata$dev,type="b")
plot(cv.mydata$k ,cv.mydata$dev ,type="b")
prune.mydata=prune.misclass(tree.mydata,best=3)
plot(prune.mydata)
text(prune.mydata,pretty=0)
tree.pred=predict(prune.mydata,mydata.test,type="class")
cpmatrix<-table(tree.pred,label.test)
cpmatrix
paccuracy = sum(cpmatrix[1,1]+cpmatrix[2,2])/(2000*0.2)
paccuracy
