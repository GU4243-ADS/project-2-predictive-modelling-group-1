setwd("~/Documents/GitHub/Spring2018/Project_Starter_Codes/doc")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("pbapply")){
install.packages("pbapply")
}
library("pbapply")
library("dplyr")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("pbapply")){
install.packages("pbapply")
}
library("pbapply")
library("dplyr")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("pbapply")){
install.packages("pbapply")
}
library("pbapply")
install.packages("rlang")
library("rlang")
library("dplyr")
library("purrr")
library("EBImage")
library("gbm")
library("tidyverse")
library("grDevices")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("pbapply")){
install.packages("pbapply")
}
library("pbapply")
library("dplyr")
library("purrr")
library("EBImage")
library("gbm")
library("tidyverse")
library("grDevices")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("pbapply")){
install.packages("pbapply")
}
library("pbapply")
library("dplyr")
library("purrr")
library("EBImage")
library("gbm")
library("tidyverse")
library("grDevices")
setwd("project-2-predictive-modelling-group-1/doc")
img_train_dir  <- "../data/pets/train/"
#img_test_dir   <- paste(experiment_dir, "test/", sep="")
run.cv            <- TRUE # run cross-validation on the training set
K                 <- 5    # number of CV folds
run.feature.train <- TRUE # process features for training set
run.test          <- TRUE # run evaluation on an independent test set
run.feature.test  <- TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels <- paste("GBM with depth =", model_values)
labels = read_csv(paste(img_train_dir, '../train_label.txt', sep=''), col_names = c('label'))
labels
n_files <- length(list.files(img_train_dir))
n_files
source("../lib/feature.R")
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(img_train_dir, "train",
data_name = "pet", export = TRUE))
}
source("../lib/feature.R")
dim(img_resized[[1]])
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("pbapply")){
install.packages("pbapply")
}
library("sets")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("pbapply")){
install.packages("pbapply")
}
if(!require("sets")){
install.packages("sets")
}
library("sets")
library("pbapply")
library("dplyr")
library("purrr")
library("EBImage")
library("gbm")
library("tidyverse")
library("grDevices")
setwd("project-2-predictive-modelling-group-1/doc")
img_train_dir  <- "../data/pets/train/"
#img_test_dir   <- paste(experiment_dir, "test/", sep="")
run.cv            <- TRUE # run cross-validation on the training set
K                 <- 5    # number of CV folds
run.feature.train <- TRUE # process features for training set
run.test          <- TRUE # run evaluation on an independent test set
run.feature.test  <- TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels <- paste("GBM with depth =", model_values)
labels = read_csv(paste(img_train_dir, '../train_label.txt', sep=''), col_names = c('label'))
labels
n_files <- length(list.files(img_train_dir))
n_files
source("../lib/feature.R")
load("../output/siftfeatures.RData")
load("../output/sift_features.RData")
load("../output/sift_features.csv")
load("../output/fit_train.Rdata")
View(fit_train)
View(fit_train)
View(fit_train)
read.table("../output/sift_features.csv", header = FALSE, sep ="", quote = "\"'",
dec = ".", skip = 0,
strip.white = FALSE, blank.lines.skip =TRUE,
comment.char = "#")
read.csv("../output/sift_features.csv", header = FALSE, sep ="", quote = "\"'",
dec = ".", skip = 0,
strip.white = FALSE, blank.lines.skip =TRUE,
comment.char = "#")
read.csv("../output/sift_features.csv")
csv <- read.csv("../output/sift_features.csv")
csv <- read.csv("../output/sift_features.csv")
data <- as.matrix(csv)
csv <- read.csv("../output/sift_features.csv")
data <- as.matrix(csv)
data
csv <- read.csv("../output/sift_features.csv", header = 'False')
csv <- read.csv("../output/sift_features.csv", header = "False")
csv <- read.csv("../output/sift_features.csv", header=TRUE, sep=",", row.names="id", na.strings=" ")
csv <- read.csv("../output/sift_features.csv", row.names="id", na.strings=" ")
csv <- read.csv("../output/sift_features.csv")
data <- as.matrix(csv)
data
csv <- read.csv("../output/sift_features.csv", sep = ",", header=TRUE)
data <- as.matrix(csv, header = FALSE)
data
csv <- read.delim("../output/sift_features.csv", header=TRUE)
csv
#data <- as.matrix(csv, header = FALSE)
#data
csv <- read.delim("../output/sift_features.csv", header=F)
csv
#data <- as.matrix(csv, header = FALSE)
#data
csv <- read.delim("../output/sift_features.csv", header=F)
csv
data <- as.matrix(csv, header = FALSE)
data
csv <- read.table("../output/sift_features.csv", sep = ",", header=F)
csv
data <- as.matrix(csv, header = FALSE)
data
#labels = read_csv(paste(img_train_dir, '../train_label.txt', sep=''), #col_names = c('label'))
#labels
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
#labels = read_csv(paste(img_train_dir, '../train_label.txt', sep=''), #col_names = c('label'))
#labels
label_train <- read.table(paste(img_train_dir, "train_label.txt", sep = ""), header = F)
#labels = read_csv(paste(img_train_dir, '../train_label.txt', sep=''), #col_names = c('label'))
#labels
label_train <- read.table(paste(img_train_dir, "../train_label.txt", sep = ""), header = F)
label_train <- as.numeric(unlist(label_train) == "dog")
label_train
csv <- read.csv("../output/sift_features.csv", sep = ",", header=F)
csv
csv <- read.csv("../output/sift_features.csv", sep = ",", header=F)
library(tree)
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("gbm")){
install.packages("gbm")
}
if(!require("pbapply")){
install.packages("pbapply")
}
if(!require("sets")){
install.packages("sets")
}
if(!require("tree")){
install.packages("tree")
}
library("sets")
library("pbapply")
library("dplyr")
library("purrr")
library("EBImage")
library("gbm")
library("tidyverse")
library("grDevices")
csv <- read.csv("../output/sift_features.csv", sep = ",", header=F)
library(tree)
attach(csv)
View(csv)
#labels = read_csv(paste(img_train_dir, '../train_label.txt', sep=''), #col_names = c('label'))
#labels
labels <- read.table(paste(img_train_dir, "../train_label.txt", sep = ""), header = F)
labels <- as.numeric(unlist(labels) == "dog")
csv <- read.csv("../output/sift_features.csv", sep = ",", header=F)
library(tree)
attach(csv)
data.frame(csv,labels)
csv <- read.csv("../output/sift_features.csv", sep = ",", header=F)
library(tree)
t(csv)
data.frame(csv,labels)
data <- read.csv("../output/sift_features.csv", sep = ",", header=F)
library(tree)
data.frame(data,labels)
features <- read.csv("../output/sift_features.csv", sep = ",", header=F)
library(tree)
mydata <- data.frame(features,labels)
tree.mydata = tree(labels~., data = features, mydata)
tree.mydata = tree(labels~.-features, mydata)
tree.mydata = tree(labels~., data = features)
tree.mydata = tree(labels~., data = features)
summary(tree.mydata)
features <- read.csv("../output/sift_features.csv", sep = ",", header=F)
library(tree)
mydata <- data.frame(features,labels)
features
data <- load("../output/fit_train.RData")
data
data <- load("../output/fit_train.RData")
print(data)
features <- read.csv("../output/sift_features.csv", sep = ",", header=F)
data.matrix(features, rownames.force = NA)
#library(tree)
#mydata <- data.frame(features,labels)
#features
features <- read.csv("../output/sift_features.csv", sep = ",", header=F)
matrix <- data.matrix(features, rownames.force = NA)
library(tree)
mydata <- data.frame(matrix,labels)
features <- read.csv("../output/sift_features.csv", sep = ",", header=F)
matrix <- data.matrix(features, rownames.force = NA)
library(tree)
mydata <- data.frame(matrix,labels)
mydata
tree.mydata = tree(labels~., data = matrix)
tree.mydata = tree(labels~., data = features)
summary(tree.mydata)
features <- read.csv("../output/sift_features.csv", sep = ",", header=F)
library(tree)
mydata <- data.frame(features,labels)
mydata
tree.mydata = tree(labels~., data = features)
summary(tree.mydata)
plot(tree.mydata)
tree.mydata = tree(labels~., data = features)
summary(tree.mydata)
text(tree.mydata,pretty=0)
tree.mydata = tree(labels~., data = features)
summary(tree.mydata)
tree.mydata
