model_best <- model_values[which.min(err_cv[, 1])]
}
par_best <- list(depth = model_best)
tm_train <- NA
tm_train <- system.time(fit_train <- train(NN_values, label_train, par_best))
par_best
tm_train <- NA
tm_train <- system.time(fit_train <- train(NN_values, label_trainada, par_best))
save(fit_train, file = "../output/NN_Ada_fit_train.RData")
cat("Time for training model=", tm_train[1], "s \n")
load("../output/feature_NN.RData")
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("e1071")){
install.packages("e1071")
}
if(!require("pbapply")){
install.packages("pbapply")
}
library("EBImage")
library("e1071")
library("tidyverse")
run.cv            <- TRUE # run cross-validation on the training set
K                 <- 5    # number of CV folds
run.feature.train <- TRUE # process features for training set
run.test          <- TRUE # run evaluation on an independent test set
run.feature.test  <- TRUE # process features for test set
experiment_dir <- "../data/pets/" # This will be modified for different data sets.
# This is where my data lives (outside of Spring2018)
img_train_dir  <- paste(experiment_dir, "train/", sep="")
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
label_train <- as.numeric(unlist(label_train) == "dog")
train.data  <- NN_values[s,]
train.label <- label_train[s]
test.data   <- NN_values[-s,]
test.label  <- label_train[-s]
set.seed(123)
s<-sample(1:2000, size=1500, replace=FALSE)
train.data  <- NN_values[s,]
train.label <- label_train[s]
test.data   <- NN_values[-s,]
test.label  <- label_train[-s]
?svm
svm_100 =svm(x = train.data, y = train.label, kernel ="linear", cost=100,scale = TRUE)
summary(svm_100)
svm_1e04=svm(x = train.data, y = train.label, kernel ="linear", cost=0.0001, scale=TRUE)
summary(svm_1e04)
summary(svm_1e04)
tune.out=tune(svm,train.x=train.data, train.y=train.label,kernel="linear",scale=T,
ranges =list(cost=c(0.001,0.005,0.01,0.1,0.5,1,10)))
summary(tune.out)
best_svm =tune.out$best.model
summary(best_svm)
label.pred = predict(best_svm,test.data)
bestmatrix<-table(predict = label.pred,truth=test.label)
bestmatrix
label.pred
summary(label.pred)
best_svm =tune.out$best.model
best_svm
label.pred = predict(best_svm,test.data)
svm_1e04=svm(x = train.data, y = train.label, kernel ="linear", cost=0.001, scale=TRUE)
svm_1e04
label.pred = predict(svm_1e04,test.data)
accuracy = sum(bestmatrix[1,1]+bestmatrix[2,2])/500
label.pred = fitted(svm_1e04,test.data)
label.pred = predict(svm_1e04,test.data)
bestmatrix<-table(predict = label.pred,truth=test.label,decision.values = TRUE)
label.pred = predict(svm_1e04,test.data)
bestmatrix<-table(predict = label.pred,truth=test.label)
bestmatrix
as.numeric(bestmatrix)
as.numeric(label.pred)
as.numeric(label.pred>mean(label.pred))
a<-as.numeric(label.pred>mean(label.pred))
bestmatrix<-table(predict = a,truth=test.label)
bestmatrix
accuracy = sum(bestmatrix[1,1]+bestmatrix[2,2])/500
accuracy
class(train.data)
svmdata<-as.data.frame(train.data,train.label)
svmdata<-as.data.frame(c(train.data,train.label))
View(svmdata)
View(svmdata)
svmdata<-as.data.frame(cbind(train.data,train.label))
View(svmdata)
class(svmdata$train.label)
svmdata$train.label<-as.factor(svmdata$train.label)
svm_1e04=svm(train.label~.,svmdata, kernel ="linear", cost=0.001, scale=TRUE)
summary(svm_1e04)
label.pred = predict(svm_1e04,test.data)
bestmatrix<-table(predict = label.pred,truth=test.label)
bestmatrix
accuracy = sum(bestmatrix[1,1]+bestmatrix[2,2])/500
accuracy
load("../output/HOGfeature.RData")
load("../output/feature_HOG.RData")
train.data  <- hog_value[s,]
train.label <- label_train[s]
test.data   <- hog_value[-s,]
test.label  <- label_train[-s]
svmdata<-as.data.frame(cbind(train.data,train.label))
svmdata$train.label<-as.factor(svmdata$train.label)
tune.out=tune(svm,train.x=train.data, train.y=train.label,kernel="linear",scale=T,
ranges =list(cost=c(0.001,0.005,0.01,0.1,0.5,1,10)))
best_svm =tune.out$best.model
summary(best_svm)
svm_1e04=svm(train.label~.,svmdata, kernel ="linear", cost=0.001, scale=TRUE)
label.pred = predict(best_svm,test.data)
svm_1e04=svm(train.label~.,svmdata, kernel ="linear", cost=0.001, scale=TRUE)
label.pred = predict(svm_1e04,test.data)
bestmatrix<-table(predict = label.pred,truth=test.label)
bestmatrix
accuracy = sum(bestmatrix[1,1]+bestmatrix[2,2])/500
accuracy
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/NN_Ada_fit_train.RData")
experiment_dir
img_test_dir<-paste(experiment_dir, "test_for_fun/", sep="")
source("../lib/Neural_network_feature.R")
img_test_dir<-paste(experiment_dir, "test_for_fun/", sep="")
tm_feature_test <- NA
system.time
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir, export = TRUE))
}
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir, export = TRUE))
}
source("../lib/Neural_network_feature.R")
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir, export = TRUE))
}
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir, export = TRUE))
}
source("../lib/Neural_network_feature.R")
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir, export = TRUE))
}
system.time
tm_feature_test
source("../lib/Adatrain.R")
source("../lib/Adatest.R")
paste0("../output/feature_", "zip", "_", "test", ".RData"))
paste0("../output/feature_", "zip", "_", "test", ".RData")
tm_test <- NA
if(run.test){
#load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/NN_Ada_fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file = "../output/wanying_pred_test.RData")
}
library("JOUSBoost")
tm_test <- NA
if(run.test){
#load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/NN_Ada_fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file = "../output/wanying_pred_test.RData")
}
source("../lib/Adatest.R")
source("../lib/Adatrain.R")
tm_test <- NA
if(run.test){
#load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/NN_Ada_fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file = "../output/wanying_pred_test.RData")
}
fit_train$fit
#load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/NN_Ada_fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
pred <- predict(fit_train$fit, dat_test)
pred <- predict(fit_train$fit, dat_test)
library("JOUSBoost")
fit_train$fit
class(fit_train$fit)
dat_test
class(dat_test)
fit_ada
fit_train
pred <- predict(fit_train, dat_test)
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NNwanying.RData")
pred <- predict(fit_train, NN_values)
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/NN_Ada_fit_train.RData")
pred <- predict(fit_train, NN_values)
pred <- predict(fit_train$fit, NN_values)
tm_test <- NA
if(run.test){
#load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/NN_Ada_fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file = "../output/pred_testwanying.RData")
}
source("../lib/Adatrain.R")
source("../lib/Adatest.R")
tm_test <- NA
if(run.test){
#load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/NN_Ada_fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file = "../output/pred_testwanying.RData")
}
run.cv            <- TRUE # run cross-validation on the training set
K                 <- 5    # number of CV folds
run.feature.train <- TRUE # process features for training set
run.test          <- TRUE # run evaluation on an independent test set
run.feature.test  <- TRUE # process features for test set
tm_test <- NA
if(run.test){
#load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/NN_Ada_fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file = "../output/pred_testwanying.RData")
}
tm_test <- NA
if(run.test){
#load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/NN_Ada_fit_train.RData")
tm_test <- system.time(pred_test <- JOUSBoost::test(fit_train, dat_test))
save(pred_test, file = "../output/pred_testwanying.RData")
}
tm_test <- NA
if(run.test){
#load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/NN_Ada_fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file = "../output/pred_testwanying.RData")
}
pred <- JOUSBoost::predict(fit_train$fit, NN_values)
library("JOUSBoost")
pred <- JOUSBoost::predict(fit_train$fit, NN_values)
pred <- predict(fit_train$fit, NN_values)
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("JOUSBoost")){
install.packages("JOUSBoost")
devtools::install_github("molson2/JOUSBoost")
}
if(!require("pbapply")){
install.packages("pbapply")
}
library("EBImage")
library("JOUSBoost")
library("tidyverse")
setwd("~/Documents/GitHub/project-2-predictive-modelling-group-1/doc")
# Replace the above with your own path or manually set it in RStudio to where this rmd file is located.
experiment_dir <- "../data/pets/" # This will be modified for different data sets.
# This is where my data lives (outside of Spring2018)
img_train_dir  <- paste(experiment_dir, "train/", sep="")
run.cv            <- TRUE # run cross-validation on the training set
K                 <- 5    # number of CV folds
run.feature.train <- TRUE # process features for training set
run.test          <- TRUE # run evaluation on an independent test set
run.feature.test  <- TRUE # process features for test set
model_values <- seq(3, 11, 2)
model_labels <- paste("Adaboosting with tree depth =", model_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
label_train <- as.numeric(unlist(label_train) == "dog")
source("../lib/Adatrain.R")
source("../lib/Adatest.R")
source("../lib/cross_validation.R")
load("../output/feature_NNwanying.RData")
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/err_cvNN_Ada.RData")
if(run.cv){
#load("../output/err_cvNN_Ada.RData")
#pdf("../fig/cv_results.pdf", width=7, height=5)
plot(model_values, err_cv[,1], xlab = "Tree Depth", ylab = "CV Error",
main = "Cross Validation Error", type = "n", ylim = c(0, 0.15))
points(model_values, err_cv[,1], col = "blue", pch=16)
lines(model_values, err_cv[,1], col = "blue")
arrows(model_values, err_cv[,1] - err_cv[,2], model_values, err_cv[,1] + err_cv[,2],
length = 0.1, angle = 90, code = 3)
#dev.off()
}
model_best <- model_values[1]
if(run.cv){
model_best <- model_values[which.min(err_cv[, 1])]
}
par_best <- list(depth = model_best)
#load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/NN_Ada_fit_train.RData")
tm_test <- NA
if(run.test){
#load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/NN_Ada_fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file = "../output/pred_testwanying.RData")
}
tm_test <- NA
if(run.test){
#load(file = paste0("../output/feature_", "zip", "_", "test", ".RData"))
load(file = "../output/NN_Ada_fit_train.RData")
tm_test <- system.time(pred_test <- test(fit_train, dat_test))
save(pred_test, file = "../output/pred_testwanying.RData")
}
pred <- predict(fit_train$fit, dat_test)
source("../lib/Adatrain.R")
source("../lib/Adatest.R")
source("../lib/cross_validation.R")
#load("../output/feature_NNwanying.RData")
#Adaboosting label need to be -1 and 1, so made some transformation here
label_trainada<-label_train
label_trainada[which(label_trainada==0)] <--1
if(run.cv){
err_cv <- array(dim = c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(NN_values, label_trainada, model_values[k], K)
}
save(err_cv, file = "../output/err_cvNN_Ada.RData")
}
source("../lib/cross_validation.R")
load("../output/feature_NN.RData")
#Adaboosting label need to be -1 and 1, so made some transformation here
label_trainada<-label_train
label_trainada[which(label_trainada==0)] <--1
if(run.cv){
err_cv <- array(dim = c(length(model_values), 2))
for(k in 1:length(model_values)){
cat("k=", k, "\n")
err_cv[k,] <- cv.function(NN_values, label_trainada, model_values[k], K)
}
save(err_cv, file = "../output/err_cvNN_Ada.RData")
}
load("../output/feature_NN.RData")
svm_1e04=svm(x = NN_values, y = train.label, kernel ="linear", cost=0.001, scale=TRUE)
svm_1e04=svm(x = NN_values, y = label_train, kernel ="linear", cost=0.001, scale=TRUE)
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NNwanying.RData")
label.pred = predict(svm_1e04,NN_values)
svmdata<-as.data.frame(cbind(NN_values,label_train))
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NN.RData")
svmdata<-as.data.frame(cbind(NN_values,label_train))
svmdata<-as.data.frame(cbind(NN_values,label_train))
svmdata$label_train<-as.factor(svmdata$label_train)
svm_1e04=svm(label_train~.,svmdata, kernel ="linear", cost=0.001, scale=TRUE)
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NNwanying.RData")
label.pred = predict(svm_1e04,NN_values)
label.pred
svm_1e04
save(svm_1e04, file = "../output/NN_SVM_fit_train.RData")
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NN.RData")
class(NN_values)
dim(NN_values)
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
experiment_dir <- "../data/pets/" # This will be modified for different data sets.
# This is where my data lives (outside of Spring2018)
img_train_dir  <- paste(experiment_dir, "train/", sep="")
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
label_train <- as.numeric(unlist(label_train) == "dog")
svmdata<-as.data.frame(cbind(NN_values,label_train))
svmdata$label_train<-as.factor(svmdata$label_train)
svm_1e04=svm(label_train~.,svmdata, kernel ="linear", cost=0.001, scale=TRUE)
save(svm_1e04, file = "../output/NN_SVM_fit_train.RData")
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NNwanying.RData")
label.pred = predict(svm_1e04,NN_values)
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NNwanying.RData")
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/NN_SVM_fit_train.RData")
label.pred = predict(svm_1e04,NN_values)
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NNwanying.RData")
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/NN_Ada_fit_train.RData")
pred <- predict(fit_train$fit, NN_values)
fit_train
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NNwanying.RData")
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/NN_Ada_fit_train.RData")
library("JOUSBoost")
pred <- predict(fit_train$fit, NN_values)
?list
pred <- predict(list(fit_train$fit), NN_values)
pred <- predict(list(fit_train), NN_values)
class(fit_train)
class(fit_train$fit)
pred <- predict(fit_train$fit, NN_values)
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NN.RData")
model_values <- seq(3, 11, 2)
model_labels <- paste("Adaboosting with tree depth =", model_values)
label_trainada<-label_train
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
experiment_dir <- "../data/pets/" # This will be modified for different data sets.
# This is where my data lives (outside of Spring2018)
img_train_dir  <- paste(experiment_dir, "train/", sep="")
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
label_train <- as.numeric(unlist(label_train) == "dog")
label_trainada<-label_train
label_trainada[which(label_trainada==0)] <--1
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NN.RData")
fit_train <- train(NN_values, label_trainada, 5)
source("../lib/Adatrain.R")
fit_train <- train(NN_values, label_trainada, 5)
fit_train <- train(NN_values, label_trainada, par_best)
par_best <- list(depth = 5)
fit_train <- train(NN_values, label_trainada, par_best)
pred <- predict(fit_train$fit, NN_values[,1:5])
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NNwanying.RData")
pred <- predict(fit_train$fit, NN_values)
save(fit_train, file = "../output/NN_ADA_fit_train3-4.RData")
library("JOUSBoost")
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/NN_ADA_fit_train3-4.RData")
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NNwanying.RData")
pred <- predict(fit_train$fit, NN_values)
source("../lib/Adatrain.R")
fit_train <- train(NN_values, label_trainada, par_best)
par_best <- list(depth = 5)
fit_train <- train(NN_values, label_trainada, par_best)
experiment_dir <- "../data/pets/" # This will be modified for different data sets.
# This is where my data lives (outside of Spring2018)
img_train_dir  <- paste(experiment_dir, "train/", sep="")
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
label_train <- as.numeric(unlist(label_train) == "dog")
label_trainada<-label_train
label_trainada[which(label_trainada==0)] <--1
fit_train <- train(NN_values, label_trainada, par_best)
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/feature_NN.RData")
fit_train <- train(NN_values, label_trainada, par_best)
pred <- predict(fit_train$fit, NN_values)
View(train)
#Train model
library("JOUSBoost")
source("../lib/Adatrain.R")
par_best <- list(depth = 5)
load(file = "../output/feature_NN.RData")
experiment_dir <- "../data/pets/" # This will be modified for different data sets.
img_train_dir  <- paste(experiment_dir, "train/", sep="")
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
label_train <- as.numeric(unlist(label_train) == "dog")
label_trainada<-label_train
label_trainada[which(label_trainada==0)] <--1
fit_train <- train(NN_values, label_trainada, par_best)
source("../lib/Neural_network_feature.R")
img_test_dir<-paste(experiment_dir, "test_for_fun/", sep="")
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir, export = TRUE))
}
source("../lib/Neural_network_feature.R")
img_test_dir<-paste(experiment_dir, "test_for_fun/", sep="")
tm_feature_test <- NA
tm_feature_test <- system.time(dat_test <- feature(img_test_dir, export = TRUE))
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("JOUSBoost")){
install.packages("JOUSBoost")
devtools::install_github("molson2/JOUSBoost")
}
if(!require("pbapply")){
install.packages("pbapply")
}
library("EBImage")
library("JOUSBoost")
library("tidyverse")
tm_feature_test <- system.time(dat_test <- feature(img_test_dir, export = TRUE))
run.feature.test<-TRUE
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir, export = TRUE))
}
#extract feature from test
source("../lib/Neural_network_feature.R")
img_test_dir<-paste(experiment_dir, "test_for_fun/", sep="")
run.feature.test<-TRUE
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir, export = TRUE))
}
#predict
pred <- predict(fit_train$fit, dat_test)
if(!require("EBImage")){
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
}
if(!require("JOUSBoost")){
install.packages("JOUSBoost")
devtools::install_github("molson2/JOUSBoost")
}
if(!require("pbapply")){
install.packages("pbapply")
}
library("EBImage")
library("JOUSBoost")
library("tidyverse")
#Train model
library("JOUSBoost")
source("../lib/Adatrain.R")
par_best <- list(depth = 5)
load(file = "../output/feature_NN.RData")
experiment_dir <- "../data/pets/" # This will be modified for different data sets.
img_train_dir  <- paste(experiment_dir, "train/", sep="")
label_train <- read.table(paste(experiment_dir, "train_label.txt", sep = ""), header = F)
label_train <- as.numeric(unlist(label_train) == "dog")
label_trainada<-label_train
label_trainada[which(label_trainada==0)] <--1
fit_train <- train(NN_values, label_trainada, par_best)
source("../lib/Neural_network_feature.R")
img_test_dir<-paste(experiment_dir, "test_for_fun/", sep="")
run.feature.test<-TRUE
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(img_test_dir, export = TRUE))
}
#predict
pred <- predict(fit_train$fit, dat_test)
load("/Users/mac/Documents/GitHub/project-2-predictive-modelling-group-1/output/SIFT_GBM_err_cv.RData")
